#!/usr/bin/env bash
set -eo pipefail
set -o errtrace

# This is a shell stub that wraps the real credential helper binary.
# It can be used on Unix platforms (Linux, macOS).
# Place this script in your Bazel workspace and make it executable.
# On Windows, the installer places a full copy of the real credential-helper.exe 
# in the workspace, so no wrapper is needed.

# You can add hardcoded configuration here or use environment variables when running Bazel
# export CREDENTIAL_HELPER_STANDALONE=1|0
#   If set to 1, the credential helper will run in standalone mode, which means it will not
#   start or connect to the agent process.
# export CREDENTIAL_HELPER_WORKDIR=/path/to/workdir
#  Path to the directory where the credential helper binary and state (including socket and PID file)
#  are stored. If unset, the workdir is caclulated based on the user's cache dir and the md5 sum
#  of the current working directory.
# export CREDENTIAL_HELPER_BIN=/path/to/credential-helper
#   Path to the credential helper binary. If not set, the helper will be searched in
#   ${HOME}/.cache/tweag-credential-helper/bin/credential-helper
# export CREDENTIAL_HELPER_AGENT_SOCKET=/path/to/agent.sock
#   Path of the agent socket. If not set, the helper will use the default path
#   ${HOME}/.cache/tweag-credential-helper/run/agent.sock
# export CREDENTIAL_HELPER_AGENT_PID=/path/to/agent.pid
#   Path of the agent pid file. If not set, the helper will use the default path
#   ${HOME}/.cache/tweag-credential-helper/run/agent.pid
# export CREDENTIAL_HELPER_LOGGING=off|basic|debug
#   The log level of the credential helper. Debug may expose sensitive information. Default is off.
# export CREDENTIAL_HELPER_IDLE_TIMEOUT=duration
#   Idle timeout of the agent in Go duration format.
#   The agent will run in the background and wait for connections until the idle timeout is reached.
#   Defaults to 3h.
# export CREDENTIAL_HELPER_PRUNE_INTERVAL=duration
#   Duration between cache prunes in Go duration format.
#   Defaults to 1m.
# export CREDENTIAL_HELPER_GUESS_OCI_REGISTRY=1|0
#   If set to 1, the credential helper will allow any uri that looks like a container registry to obtain authentication tokens from the docker config.json.
#   If turned off, only a well-known subset of registries are supported.

credential_helper_install_command="bazel run @tweag-credential-helper//installer"

export CREDENTIAL_HELPER_WORKSPACE_DIRECTORY="${CREDENTIAL_HELPER_WORKSPACE_DIRECTORY:-$(pwd)}"

# Bazel spawns the credential helper process using the workspace root as working directory.
# We abuse this fact to obtain a stable, workspace specific install dir (just like Bazel's output base).
workdir_hash() {
  if builtin command -v md5 > /dev/null; then
    echo -n "${CREDENTIAL_HELPER_WORKSPACE_DIRECTORY}" | md5
  elif builtin command -v md5sum > /dev/null ; then
    local md5_array=($(echo -n "${CREDENTIAL_HELPER_WORKSPACE_DIRECTORY}" | md5sum))
    echo "${md5_array}"
  else
    echo "Neither md5 nor md5sum were found in the PATH" >&2
    exit 1
  fi
}

case "$(uname -s)" in
    Linux*)     cache_dir="${HOME}/.cache";;
    Darwin*)    cache_dir="${HOME}/Library/Caches";;
    *)          echo "Unknown OS $(uname -s) >&2"; exit 1;;
esac

if [ -n "${TEST_TMPDIR}" ]; then
    cache_dir="${TEST_TMPDIR}"
fi

if [ -n "${CREDENTIAL_HELPER_WORKDIR}" ]; then
  workdir="${CREDENTIAL_HELPER_WORKDIR}"
else
  workdir="${cache_dir}/tweag-credential-helper/$(workdir_hash)"
fi

if [ -n "${CREDENTIAL_HELPER_BIN}" ]; then
    helper_bin="${CREDENTIAL_HELPER_BIN}"
else
    helper_bin=${workdir}/bin/credential-helper
fi

if [ ! -f $helper_bin ]; then
    echo "credential helper is not installed under ${helper_bin}" >&2
    echo "You can install it using the following command:" >&2
    echo "  ${credential_helper_install_command}" >&2
    exit 1
fi

exec "${helper_bin}" "$@"
